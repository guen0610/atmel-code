
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000057c  00000610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000057c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800110  00800110  00000620  2**0
                  ALLOC
  3 .stab         000009c0  00000000  00000000  00000620  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001db  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  000011bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000137  00000000  00000000  000011db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000b00  00000000  00000000  00001312  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000020d  00000000  00000000  00001e12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000006c6  00000000  00000000  0000201f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000d0  00000000  00000000  000026e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000242  00000000  00000000  000027b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000024f  00000000  00000000  000029fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000044  00000000  00000000  00002c49  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  00002c8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__vector_21>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e7       	ldi	r30, 0x7C	; 124
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 31       	cpi	r26, 0x1C	; 28
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 a5 01 	call	0x34a	; 0x34a <main>
  c6:	0c 94 bc 02 	jmp	0x578	; 0x578 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <lcd_write_4>:
  Exit:     no parameters
  Notes:    use either time delays or the busy flag
*/
void lcd_write_4(uint8_t theByte)
{
    lcd_D7_port &= ~(1<<lcd_D7_bit);                        // assume that data is '0'
  ce:	af 98       	cbi	0x15, 7	; 21
    if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);     // make data = '1' if necessary
  d0:	88 23       	and	r24, r24
  d2:	0c f4       	brge	.+2      	; 0xd6 <lcd_write_4+0x8>
  d4:	af 9a       	sbi	0x15, 7	; 21

    lcd_D6_port &= ~(1<<lcd_D6_bit);                        // repeat for each data bit
  d6:	ae 98       	cbi	0x15, 6	; 21
    if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
  d8:	86 fd       	sbrc	r24, 6
  da:	ae 9a       	sbi	0x15, 6	; 21

    lcd_D5_port &= ~(1<<lcd_D5_bit);
  dc:	ad 98       	cbi	0x15, 5	; 21
    if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
  de:	85 fd       	sbrc	r24, 5
  e0:	ad 9a       	sbi	0x15, 5	; 21

    lcd_D4_port &= ~(1<<lcd_D4_bit);
  e2:	ac 98       	cbi	0x15, 4	; 21
    if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
  e4:	84 fd       	sbrc	r24, 4
  e6:	ac 9a       	sbi	0x15, 4	; 21

// write the data
                                                    // 'Address set-up time' (40 nS)
    lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
  e8:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <lcd_write_4+0x1e>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <lcd_write_4+0x24>
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
  f2:	97 98       	cbi	0x12, 7	; 18
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	8a 95       	dec	r24
  f8:	f1 f7       	brne	.-4      	; 0xf6 <lcd_write_4+0x28>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <lcd_write_4+0x2e>
    _delay_us(1);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
  fc:	08 95       	ret

000000fe <lcd_write_instruction_4d>:
  Entry:    (theInstruction) is the information to be sent to the instruction register
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/
void lcd_write_instruction_4d(uint8_t theInstruction)
{
  fe:	1f 93       	push	r17
 100:	18 2f       	mov	r17, r24
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
 102:	95 98       	cbi	0x12, 5	; 18
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
 104:	97 98       	cbi	0x12, 7	; 18
    lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
 106:	0e 94 67 00 	call	0xce	; 0xce <lcd_write_4>
    lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
 10a:	81 2f       	mov	r24, r17
 10c:	82 95       	swap	r24
 10e:	80 7f       	andi	r24, 0xF0	; 240
 110:	0e 94 67 00 	call	0xce	; 0xce <lcd_write_4>
}
 114:	1f 91       	pop	r17
 116:	08 95       	ret

00000118 <lcd_write_character_4d>:
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/

void lcd_write_character_4d(uint8_t theData)
{
 118:	1f 93       	push	r17
 11a:	18 2f       	mov	r17, r24
    lcd_RS_port |= (1<<lcd_RS_bit);                 // select the Data Register (RS high)
 11c:	95 9a       	sbi	0x12, 5	; 18
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
 11e:	97 98       	cbi	0x12, 7	; 18
    lcd_write_4(theData);                           // write the upper 4-bits of the data
 120:	0e 94 67 00 	call	0xce	; 0xce <lcd_write_4>
    lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
 124:	81 2f       	mov	r24, r17
 126:	82 95       	swap	r24
 128:	80 7f       	andi	r24, 0xF0	; 240
 12a:	0e 94 67 00 	call	0xce	; 0xce <lcd_write_4>
}
 12e:	1f 91       	pop	r17
 130:	08 95       	ret

00000132 <lcd_write_string_4d>:
  Entry:    (theString) is the string to be displayed
  Exit:     no parameters
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	df 93       	push	r29
 138:	cf 93       	push	r28
 13a:	00 d0       	rcall	.+0      	; 0x13c <lcd_write_string_4d+0xa>
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
 140:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // character counter*/
 142:	1a 82       	std	Y+2, r1	; 0x02
 144:	19 82       	std	Y+1, r1	; 0x01
    while (theString[i] != 0)
 146:	e9 81       	ldd	r30, Y+1	; 0x01
 148:	fa 81       	ldd	r31, Y+2	; 0x02
 14a:	e8 0f       	add	r30, r24
 14c:	f9 1f       	adc	r31, r25
 14e:	80 81       	ld	r24, Z
 150:	88 23       	and	r24, r24
 152:	b9 f0       	breq	.+46     	; 0x182 <lcd_write_string_4d+0x50>
    {
        lcd_write_character_4d(theString[i]);
 154:	e9 81       	ldd	r30, Y+1	; 0x01
 156:	fa 81       	ldd	r31, Y+2	; 0x02
 158:	e0 0f       	add	r30, r16
 15a:	f1 1f       	adc	r31, r17
 15c:	80 81       	ld	r24, Z
 15e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_write_character_4d>
        i++;
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	9a 81       	ldd	r25, Y+2	; 0x02
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	9a 83       	std	Y+2, r25	; 0x02
 16a:	89 83       	std	Y+1, r24	; 0x01
 16c:	85 ed       	ldi	r24, 0xD5	; 213
 16e:	8a 95       	dec	r24
 170:	f1 f7       	brne	.-4      	; 0x16e <lcd_write_string_4d+0x3c>
 172:	00 00       	nop
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
    volatile int i = 0;                             // character counter*/
    while (theString[i] != 0)
 174:	e9 81       	ldd	r30, Y+1	; 0x01
 176:	fa 81       	ldd	r31, Y+2	; 0x02
 178:	e0 0f       	add	r30, r16
 17a:	f1 1f       	adc	r31, r17
 17c:	80 81       	ld	r24, Z
 17e:	88 23       	and	r24, r24
 180:	49 f7       	brne	.-46     	; 0x154 <lcd_write_string_4d+0x22>
    {
        lcd_write_character_4d(theString[i]);
        i++;
        _delay_us(80);                              // 40 uS delay (min)
    }
}
 182:	0f 90       	pop	r0
 184:	0f 90       	pop	r0
 186:	cf 91       	pop	r28
 188:	df 91       	pop	r29
 18a:	1f 91       	pop	r17
 18c:	0f 91       	pop	r16
 18e:	08 95       	ret

00000190 <lcd_puthex>:
void CopyStringtoLCD(const uint8_t *FlashLoc);
void LCDsendChar(uint8_t ch);


void lcd_puthex(const char data)
{
 190:	1f 93       	push	r17
 192:	18 2f       	mov	r17, r24
 194:	85 ed       	ldi	r24, 0xD5	; 213
 196:	8a 95       	dec	r24
 198:	f1 f7       	brne	.-4      	; 0x196 <lcd_puthex+0x6>
 19a:	00 00       	nop
	//lcd_write_character_4d('0');
	//_delay_us(80);
	//print 'x'
	//lcd_write_character_4d('x');
	//_delay_us(80);
	(((data>>4)&0x0F)<=9) ? (temp='0'+((data>>4)&0x0F)) : (temp='A'+ ((data>>4)&0x0F)-0x0A);
 19c:	81 2f       	mov	r24, r17
 19e:	82 95       	swap	r24
 1a0:	8f 70       	andi	r24, 0x0F	; 15
 1a2:	28 2f       	mov	r18, r24
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	2a 30       	cpi	r18, 0x0A	; 10
 1a8:	31 05       	cpc	r19, r1
 1aa:	14 f4       	brge	.+4      	; 0x1b0 <lcd_puthex+0x20>
 1ac:	80 5d       	subi	r24, 0xD0	; 208
 1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <lcd_puthex+0x22>
 1b0:	89 5c       	subi	r24, 0xC9	; 201
 1b2:	95 ed       	ldi	r25, 0xD5	; 213
 1b4:	9a 95       	dec	r25
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <lcd_puthex+0x24>
 1b8:	00 00       	nop
	_delay_us(80);
	//print high nibble as hex
	lcd_write_character_4d(temp);
 1ba:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_write_character_4d>
 1be:	85 ed       	ldi	r24, 0xD5	; 213
 1c0:	8a 95       	dec	r24
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcd_puthex+0x30>
 1c4:	00 00       	nop
	_delay_us(80);
	((data&0x0F)<=9) ? (temp='0'+ (data&0x0F)) : (temp='A'+ (data&0x0F)-0x0A);
 1c6:	21 2f       	mov	r18, r17
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	2f 70       	andi	r18, 0x0F	; 15
 1cc:	30 70       	andi	r19, 0x00	; 0
 1ce:	2a 30       	cpi	r18, 0x0A	; 10
 1d0:	31 05       	cpc	r19, r1
 1d2:	24 f4       	brge	.+8      	; 0x1dc <lcd_puthex+0x4c>
 1d4:	1f 70       	andi	r17, 0x0F	; 15
 1d6:	81 2f       	mov	r24, r17
 1d8:	80 5d       	subi	r24, 0xD0	; 208
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <lcd_puthex+0x52>
 1dc:	1f 70       	andi	r17, 0x0F	; 15
 1de:	81 2f       	mov	r24, r17
 1e0:	89 5c       	subi	r24, 0xC9	; 201
	lcd_write_character_4d(temp);
 1e2:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_write_character_4d>
 1e6:	95 ed       	ldi	r25, 0xD5	; 213
 1e8:	9a 95       	dec	r25
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <lcd_puthex+0x58>
 1ec:	00 00       	nop
	_delay_us(80);
	//print low nibble as hex
}
 1ee:	1f 91       	pop	r17
 1f0:	08 95       	ret

000001f2 <lcd_init_4d>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	90 e7       	ldi	r25, 0x70	; 112
 1f6:	a2 e0       	ldi	r26, 0x02	; 2
 1f8:	81 50       	subi	r24, 0x01	; 1
 1fa:	90 40       	sbci	r25, 0x00	; 0
 1fc:	a0 40       	sbci	r26, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <lcd_init_4d+0x6>
 200:	00 c0       	rjmp	.+0      	; 0x202 <lcd_init_4d+0x10>
 202:	00 00       	nop
void lcd_init_4d(void)
{
// Power-up delay
    _delay_ms(100);                                 // initial 40 mSec delay

    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
 204:	95 98       	cbi	0x12, 5	; 18
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
 206:	97 98       	cbi	0x12, 7	; 18

// Reset the LCD controller
    lcd_write_4(lcd_FunctionReset);                 // first part of reset sequence
 208:	80 e3       	ldi	r24, 0x30	; 48
 20a:	0e 94 67 00 	call	0xce	; 0xce <lcd_write_4>
 20e:	af e1       	ldi	r26, 0x1F	; 31
 210:	be e4       	ldi	r27, 0x4E	; 78
 212:	11 97       	sbiw	r26, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <lcd_init_4d+0x20>
 216:	00 c0       	rjmp	.+0      	; 0x218 <lcd_init_4d+0x26>
 218:	00 00       	nop
    _delay_ms(10);                                  // 4.1 mS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // second part of reset sequence
 21a:	80 e3       	ldi	r24, 0x30	; 48
 21c:	0e 94 67 00 	call	0xce	; 0xce <lcd_write_4>
 220:	8f ec       	ldi	r24, 0xCF	; 207
 222:	97 e0       	ldi	r25, 0x07	; 7
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <lcd_init_4d+0x32>
 228:	00 c0       	rjmp	.+0      	; 0x22a <lcd_init_4d+0x38>
 22a:	00 00       	nop
    _delay_ms(1);                                 // 100uS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // third part of reset sequence
 22c:	80 e3       	ldi	r24, 0x30	; 48
 22e:	0e 94 67 00 	call	0xce	; 0xce <lcd_write_4>
 232:	af ec       	ldi	r26, 0xCF	; 207
 234:	b7 e0       	ldi	r27, 0x07	; 7
 236:	11 97       	sbiw	r26, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <lcd_init_4d+0x44>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <lcd_init_4d+0x4a>
 23c:	00 00       	nop
// Preliminary Function Set instruction - used only to set the 4-bit mode.
// The number of lines or the font cannot be set at this time since the controller is still in the
//  8-bit mode, but the data transfer mode can be changed since this parameter is determined by one 
//  of the upper four bits of the instruction.
 
    lcd_write_4(lcd_FunctionSet4bit);               // set 4-bit mode
 23e:	88 e2       	ldi	r24, 0x28	; 40
 240:	0e 94 67 00 	call	0xce	; 0xce <lcd_write_4>
 244:	8f ec       	ldi	r24, 0xCF	; 207
 246:	97 e0       	ldi	r25, 0x07	; 7
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <lcd_init_4d+0x56>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <lcd_init_4d+0x5c>
 24e:	00 00       	nop
    _delay_ms(1);                                  // 40uS delay (min)

// Function Set instruction
    lcd_write_instruction_4d(lcd_FunctionSet4bit);   // set mode, lines, and font
 250:	88 e2       	ldi	r24, 0x28	; 40
 252:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_instruction_4d>
 256:	af ec       	ldi	r26, 0xCF	; 207
 258:	b7 e0       	ldi	r27, 0x07	; 7
 25a:	11 97       	sbiw	r26, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <lcd_init_4d+0x68>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <lcd_init_4d+0x6e>
 260:	00 00       	nop
// The next three instructions are specified in the data sheet as part of the initialization routine, 
//  so it is a good idea (but probably not necessary) to do them just as specified and then redo them 
//  later if the application requires a different configuration.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOff);        // turn display OFF
 262:	88 e0       	ldi	r24, 0x08	; 8
 264:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_instruction_4d>
 268:	8f ec       	ldi	r24, 0xCF	; 207
 26a:	97 e0       	ldi	r25, 0x07	; 7
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <lcd_init_4d+0x7a>
 270:	00 c0       	rjmp	.+0      	; 0x272 <lcd_init_4d+0x80>
 272:	00 00       	nop
    _delay_ms(1);                                  // 40uS delay (min)

// Clear Display instruction
    lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_instruction_4d>
 27a:	af e3       	ldi	r26, 0x3F	; 63
 27c:	bf e1       	ldi	r27, 0x1F	; 31
 27e:	11 97       	sbiw	r26, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <lcd_init_4d+0x8c>
 282:	00 c0       	rjmp	.+0      	; 0x284 <lcd_init_4d+0x92>
 284:	00 00       	nop
    _delay_ms(4);                                   // 1.64 mS delay (min)

// ; Entry Mode Set instruction
    lcd_write_instruction_4d(lcd_EntryMode);         // set desired shift characteristics
 286:	86 e0       	ldi	r24, 0x06	; 6
 288:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_instruction_4d>
 28c:	8f ec       	ldi	r24, 0xCF	; 207
 28e:	97 e0       	ldi	r25, 0x07	; 7
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <lcd_init_4d+0x9e>
 294:	00 c0       	rjmp	.+0      	; 0x296 <lcd_init_4d+0xa4>
 296:	00 00       	nop

// This is the end of the LCD controller initialization as specified in the data sheet, but the display
//  has been left in the OFF condition.  This is a good time to turn the display back ON.
 
// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
 298:	8c e0       	ldi	r24, 0x0C	; 12
 29a:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_instruction_4d>
 29e:	af ec       	ldi	r26, 0xCF	; 207
 2a0:	b7 e0       	ldi	r27, 0x07	; 7
 2a2:	11 97       	sbiw	r26, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <lcd_init_4d+0xb0>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <lcd_init_4d+0xb6>
 2a8:	00 00       	nop
    _delay_ms(1);                                  // 40uS delay (min)
}
 2aa:	08 95       	ret

000002ac <LCDsendChar>:

void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

	//4 bit part
	PORTC=(ch&0b11110000);
 2ac:	98 2f       	mov	r25, r24
 2ae:	90 7f       	andi	r25, 0xF0	; 240
 2b0:	95 bb       	out	0x15, r25	; 21
	PORTD|=1<<lcd_RS_bit ;
 2b2:	95 9a       	sbi	0x12, 5	; 18
	PORTG|=1<<lcd_E_bit;		
 2b4:	e5 e6       	ldi	r30, 0x65	; 101
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	90 81       	ld	r25, Z
 2ba:	90 68       	ori	r25, 0x80	; 128
 2bc:	90 83       	st	Z, r25
 2be:	af ec       	ldi	r26, 0xCF	; 207
 2c0:	b7 e0       	ldi	r27, 0x07	; 7
 2c2:	11 97       	sbiw	r26, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <LCDsendChar+0x16>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <LCDsendChar+0x1c>
 2c8:	00 00       	nop
	_delay_ms(1);
	PORTG&=~(1<<lcd_E_bit);	
 2ca:	90 81       	ld	r25, Z
 2cc:	9f 77       	andi	r25, 0x7F	; 127
 2ce:	90 83       	st	Z, r25
	PORTD&=~(1<<lcd_RS_bit);
 2d0:	95 98       	cbi	0x12, 5	; 18
 2d2:	af ec       	ldi	r26, 0xCF	; 207
 2d4:	b7 e0       	ldi	r27, 0x07	; 7
 2d6:	11 97       	sbiw	r26, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <LCDsendChar+0x2a>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <LCDsendChar+0x30>
 2dc:	00 00       	nop
	_delay_ms(1);
	PORTC=((ch&0b00001111)<<4);
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	82 95       	swap	r24
 2e2:	92 95       	swap	r25
 2e4:	90 7f       	andi	r25, 0xF0	; 240
 2e6:	98 27       	eor	r25, r24
 2e8:	80 7f       	andi	r24, 0xF0	; 240
 2ea:	98 27       	eor	r25, r24
 2ec:	85 bb       	out	0x15, r24	; 21
	PORTD|=1<<lcd_RS_bit;
 2ee:	95 9a       	sbi	0x12, 5	; 18
	PORTG|=1<<lcd_E_bit;		
 2f0:	80 81       	ld	r24, Z
 2f2:	80 68       	ori	r24, 0x80	; 128
 2f4:	80 83       	st	Z, r24
 2f6:	8f ec       	ldi	r24, 0xCF	; 207
 2f8:	97 e0       	ldi	r25, 0x07	; 7
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <LCDsendChar+0x4e>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <LCDsendChar+0x54>
 300:	00 00       	nop
	_delay_ms(1);
	PORTG&=~(1<<lcd_E_bit);	
 302:	80 81       	ld	r24, Z
 304:	8f 77       	andi	r24, 0x7F	; 127
 306:	80 83       	st	Z, r24
	PORTD&=~(1<<lcd_RS_bit);
 308:	95 98       	cbi	0x12, 5	; 18
 30a:	af ec       	ldi	r26, 0xCF	; 207
 30c:	b7 e0       	ldi	r27, 0x07	; 7
 30e:	11 97       	sbiw	r26, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <LCDsendChar+0x62>
 312:	00 c0       	rjmp	.+0      	; 0x314 <LCDsendChar+0x68>
 314:	00 00       	nop
	_delay_ms(1);
}
 316:	08 95       	ret

00000318 <CopyStringtoLCD>:
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
    _delay_us(1);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
void CopyStringtoLCD(const uint8_t *FlashLoc)
{
 318:	1f 93       	push	r17
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	ec 01       	movw	r28, r24
	uint8_t i;
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 320:	fe 01       	movw	r30, r28
 322:	24 91       	lpm	r18, Z+
 324:	22 23       	and	r18, r18
 326:	69 f0       	breq	.+26     	; 0x342 <CopyStringtoLCD+0x2a>
 328:	10 e0       	ldi	r17, 0x00	; 0
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
 32a:	fc 01       	movw	r30, r24
 32c:	84 91       	lpm	r24, Z+
 32e:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCDsendChar>
    _delay_us(1);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
void CopyStringtoLCD(const uint8_t *FlashLoc)
{
	uint8_t i;
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 332:	1f 5f       	subi	r17, 0xFF	; 255
 334:	ce 01       	movw	r24, r28
 336:	81 0f       	add	r24, r17
 338:	91 1d       	adc	r25, r1
 33a:	fc 01       	movw	r30, r24
 33c:	24 91       	lpm	r18, Z+
 33e:	22 23       	and	r18, r18
 340:	a1 f7       	brne	.-24     	; 0x32a <CopyStringtoLCD+0x12>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	1f 91       	pop	r17
 348:	08 95       	ret

0000034a <main>:

ISR(ADC_vect);

int main(void)
{
	DDRA |= (1<<RELAY_PIN); //relay pin
 34a:	d1 9a       	sbi	0x1a, 1	; 26
	PORTA &= ~(1<<RELAY_PIN);
 34c:	d9 98       	cbi	0x1b, 1	; 27
    DDRC = 0xFF;    // lcd pins
 34e:	8f ef       	ldi	r24, 0xFF	; 255
 350:	84 bb       	out	0x14, r24	; 20
  
	DDRF &= ~(_BV(3));
 352:	e1 e6       	ldi	r30, 0x61	; 97
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	87 7f       	andi	r24, 0xF7	; 247
 35a:	80 83       	st	Z, r24
 35c:	8f ef       	ldi	r24, 0xFF	; 255
 35e:	93 ef       	ldi	r25, 0xF3	; 243
 360:	a1 e0       	ldi	r26, 0x01	; 1
 362:	81 50       	subi	r24, 0x01	; 1
 364:	90 40       	sbci	r25, 0x00	; 0
 366:	a0 40       	sbci	r26, 0x00	; 0
 368:	e1 f7       	brne	.-8      	; 0x362 <main+0x18>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <main+0x22>
 36c:	00 00       	nop
	_delay_ms(80);
	PORTC &= ~(_BV(3));
 36e:	ab 98       	cbi	0x15, 3	; 21
    PORTC &= ~(_BV(2));
 370:	aa 98       	cbi	0x15, 2	; 21
    PORTC &= ~(_BV(1));
 372:	a9 98       	cbi	0x15, 1	; 21
    PORTC &= ~(_BV(0));
 374:	a8 98       	cbi	0x15, 0	; 21
	
// configure the microprocessor pins for the control lines
    lcd_E_ddr |= (1<<lcd_E_bit);                    // E line - output
 376:	8f 9a       	sbi	0x11, 7	; 17
    lcd_RS_ddr |= (1<<lcd_RS_bit);                  // RS line - output
 378:	8d 9a       	sbi	0x11, 5	; 17
 
    lcd_RS_port &= ~(1<<lcd_RS_bit);
 37a:	95 98       	cbi	0x12, 5	; 18
	PORTF &= ~(_BV(1));
 37c:	e2 e6       	ldi	r30, 0x62	; 98
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	8d 7f       	andi	r24, 0xFD	; 253
 384:	80 83       	st	Z, r24
	
	ADMUX |= (1<<MUX1)|(1<<MUX0)|(1<<REFS0);
 386:	87 b1       	in	r24, 0x07	; 7
 388:	83 64       	ori	r24, 0x43	; 67
 38a:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 38c:	86 b1       	in	r24, 0x06	; 6
 38e:	8f 68       	ori	r24, 0x8F	; 143
 390:	86 b9       	out	0x06, r24	; 6
 392:	8f ef       	ldi	r24, 0xFF	; 255
 394:	99 e6       	ldi	r25, 0x69	; 105
 396:	a8 e1       	ldi	r26, 0x18	; 24
 398:	81 50       	subi	r24, 0x01	; 1
 39a:	90 40       	sbci	r25, 0x00	; 0
 39c:	a0 40       	sbci	r26, 0x00	; 0
 39e:	e1 f7       	brne	.-8      	; 0x398 <main+0x4e>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <main+0x58>
 3a2:	00 00       	nop
	//USART0_Init();
	_delay_ms(1000);
	lcd_init_4d();
 3a4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_init_4d>
	lcd_write_instruction_4d(lcd_Clear);
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_instruction_4d>
 3ae:	af e1       	ldi	r26, 0x1F	; 31
 3b0:	be e4       	ldi	r27, 0x4E	; 78
 3b2:	11 97       	sbiw	r26, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <main+0x68>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <main+0x6e>
 3b8:	00 00       	nop
    _delay_ms(10);
	lcd_write_string_4d("sdsd");
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	0e 94 99 00 	call	0x132	; 0x132 <lcd_write_string_4d>
    	x++;
    	itoa(x,SHOWA,10);
		lcd_write_string_4d("AA");
		_delay_ms(1000);
	}*/
	sei();
 3c2:	78 94       	sei
	MCUSR |= (1<<SE)|(1<<SM0); //adc noise reduction mode
 3c4:	84 b7       	in	r24, 0x34	; 52
 3c6:	88 62       	ori	r24, 0x28	; 40
 3c8:	84 bf       	out	0x34, r24	; 52
	ADCSRA |= (1<<ADSC);
 3ca:	36 9a       	sbi	0x06, 6	; 6
	
	while(1)
	{
		// Check to see if the value has been updated
		if (readFlag == 1){
 3cc:	80 91 19 01 	lds	r24, 0x0119
 3d0:	90 91 1a 01 	lds	r25, 0x011A
 3d4:	81 30       	cpi	r24, 0x01	; 1
 3d6:	91 05       	cpc	r25, r1
 3d8:	c9 f7       	brne	.-14     	; 0x3cc <main+0x82>
    
		// Perform whatever updating needed
			
		readFlag = 0;
 3da:	10 92 1a 01 	sts	0x011A, r1
 3de:	10 92 19 01 	sts	0x0119, r1
 3e2:	f4 cf       	rjmp	.-24     	; 0x3cc <main+0x82>

000003e4 <__vector_21>:
	
	
	
}
ISR(ADC_vect)
{
 3e4:	1f 92       	push	r1
 3e6:	0f 92       	push	r0
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	0f 92       	push	r0
 3ec:	0b b6       	in	r0, 0x3b	; 59
 3ee:	0f 92       	push	r0
 3f0:	11 24       	eor	r1, r1
 3f2:	ef 92       	push	r14
 3f4:	ff 92       	push	r15
 3f6:	2f 93       	push	r18
 3f8:	3f 93       	push	r19
 3fa:	4f 93       	push	r20
 3fc:	5f 93       	push	r21
 3fe:	6f 93       	push	r22
 400:	7f 93       	push	r23
 402:	8f 93       	push	r24
 404:	9f 93       	push	r25
 406:	af 93       	push	r26
 408:	bf 93       	push	r27
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	ef 93       	push	r30
 410:	ff 93       	push	r31
		memset(SHOWA,'\0',3);
 412:	c6 e1       	ldi	r28, 0x16	; 22
 414:	d1 e0       	ldi	r29, 0x01	; 1
 416:	7e 01       	movw	r14, r28
 418:	8c 2f       	mov	r24, r28
 41a:	9f 2d       	mov	r25, r15
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	70 e0       	ldi	r23, 0x00	; 0
 420:	43 e0       	ldi	r20, 0x03	; 3
 422:	50 e0       	ldi	r21, 0x00	; 0
 424:	0e 94 70 02 	call	0x4e0	; 0x4e0 <memset>
			lcd_write_instruction_4d(lcd_Clear);
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_instruction_4d>
 42e:	8f e1       	ldi	r24, 0x1F	; 31
 430:	9e e4       	ldi	r25, 0x4E	; 78
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <__vector_21+0x4e>
 436:	00 c0       	rjmp	.+0      	; 0x438 <__vector_21+0x54>
 438:	00 00       	nop
			_delay_ms(10);
    		COUNTA = (ADC*500)/1024;
 43a:	44 b1       	in	r20, 0x04	; 4
 43c:	55 b1       	in	r21, 0x05	; 5
 43e:	24 ef       	ldi	r18, 0xF4	; 244
 440:	31 e0       	ldi	r19, 0x01	; 1
 442:	42 9f       	mul	r20, r18
 444:	c0 01       	movw	r24, r0
 446:	43 9f       	mul	r20, r19
 448:	90 0d       	add	r25, r0
 44a:	52 9f       	mul	r21, r18
 44c:	90 0d       	add	r25, r0
 44e:	11 24       	eor	r1, r1
 450:	89 2f       	mov	r24, r25
 452:	99 27       	eor	r25, r25
 454:	86 95       	lsr	r24
 456:	86 95       	lsr	r24
 458:	90 93 11 01 	sts	0x0111, r25
 45c:	80 93 10 01 	sts	0x0110, r24
    		itoa(COUNTA,SHOWA,10);
 460:	80 91 10 01 	lds	r24, 0x0110
 464:	90 91 11 01 	lds	r25, 0x0111
 468:	be 01       	movw	r22, r28
 46a:	4a e0       	ldi	r20, 0x0A	; 10
 46c:	50 e0       	ldi	r21, 0x00	; 0
 46e:	0e 94 77 02 	call	0x4ee	; 0x4ee <itoa>
			lcd_write_string_4d("ROOM1: ");
 472:	85 e0       	ldi	r24, 0x05	; 5
 474:	91 e0       	ldi	r25, 0x01	; 1
 476:	0e 94 99 00 	call	0x132	; 0x132 <lcd_write_string_4d>
			lcd_write_string_4d(SHOWA);
 47a:	ce 01       	movw	r24, r28
 47c:	0e 94 99 00 	call	0x132	; 0x132 <lcd_write_string_4d>
			lcd_write_string_4d("C");
 480:	8d e0       	ldi	r24, 0x0D	; 13
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	0e 94 99 00 	call	0x132	; 0x132 <lcd_write_string_4d>
 488:	8f ef       	ldi	r24, 0xFF	; 255
 48a:	94 e3       	ldi	r25, 0x34	; 52
 48c:	ac e0       	ldi	r26, 0x0C	; 12
 48e:	81 50       	subi	r24, 0x01	; 1
 490:	90 40       	sbci	r25, 0x00	; 0
 492:	a0 40       	sbci	r26, 0x00	; 0
 494:	e1 f7       	brne	.-8      	; 0x48e <__vector_21+0xaa>
 496:	00 c0       	rjmp	.+0      	; 0x498 <__vector_21+0xb4>
 498:	00 00       	nop
			_delay_ms(500);
			ADCSRA |= (1<<ADSC);
 49a:	36 9a       	sbi	0x06, 6	; 6
  // Must read low first
  analogVal = ADCH;
  //itoa(ADCH,SHOWA,10);
			//lcd_write_string_4d(SHOWA);
  ADCSRA |= (1<<ADSC);*/
}
 49c:	ff 91       	pop	r31
 49e:	ef 91       	pop	r30
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	bf 91       	pop	r27
 4a6:	af 91       	pop	r26
 4a8:	9f 91       	pop	r25
 4aa:	8f 91       	pop	r24
 4ac:	7f 91       	pop	r23
 4ae:	6f 91       	pop	r22
 4b0:	5f 91       	pop	r21
 4b2:	4f 91       	pop	r20
 4b4:	3f 91       	pop	r19
 4b6:	2f 91       	pop	r18
 4b8:	ff 90       	pop	r15
 4ba:	ef 90       	pop	r14
 4bc:	0f 90       	pop	r0
 4be:	0b be       	out	0x3b, r0	; 59
 4c0:	0f 90       	pop	r0
 4c2:	0f be       	out	0x3f, r0	; 63
 4c4:	0f 90       	pop	r0
 4c6:	1f 90       	pop	r1
 4c8:	18 95       	reti

000004ca <USART0_Init>:

void USART0_Init(void){
   // Set baud rate
   UBRR0L = BAUD_PRESCALE;// Load lower 8-bits into the low byte of the UBRR register
 4ca:	83 e3       	ldi	r24, 0x33	; 51
 4cc:	89 b9       	out	0x09, r24	; 9
   UBRR0H = (BAUD_PRESCALE >> 8); 
 4ce:	10 92 90 00 	sts	0x0090, r1
	 /* Load upper 8-bits into the high byte of the UBRR register
    Default frame format is 8 data bits, no parity, 1 stop bit
  to change use UCSRC, see AVR datasheet*/ 

  // Enable receiver and transmitter and receive complete interrupt 
  UCSR0B = (1<<TXEN);
 4d2:	88 e0       	ldi	r24, 0x08	; 8
 4d4:	8a b9       	out	0x0a, r24	; 10
}
 4d6:	08 95       	ret

000004d8 <USART0_SendByte>:


void USART0_SendByte(uint8_t u8Data){

  // Wait until last byte has been transmitted
  while((UCSR0A &(1<<UDRE0)) == 0);
 4d8:	5d 9b       	sbis	0x0b, 5	; 11
 4da:	fe cf       	rjmp	.-4      	; 0x4d8 <USART0_SendByte>

  // Transmit data
  UDR0 = u8Data;
 4dc:	8c b9       	out	0x0c, r24	; 12
}
 4de:	08 95       	ret

000004e0 <memset>:
 4e0:	dc 01       	movw	r26, r24
 4e2:	01 c0       	rjmp	.+2      	; 0x4e6 <memset+0x6>
 4e4:	6d 93       	st	X+, r22
 4e6:	41 50       	subi	r20, 0x01	; 1
 4e8:	50 40       	sbci	r21, 0x00	; 0
 4ea:	e0 f7       	brcc	.-8      	; 0x4e4 <memset+0x4>
 4ec:	08 95       	ret

000004ee <itoa>:
 4ee:	fb 01       	movw	r30, r22
 4f0:	9f 01       	movw	r18, r30
 4f2:	e8 94       	clt
 4f4:	42 30       	cpi	r20, 0x02	; 2
 4f6:	c4 f0       	brlt	.+48     	; 0x528 <itoa+0x3a>
 4f8:	45 32       	cpi	r20, 0x25	; 37
 4fa:	b4 f4       	brge	.+44     	; 0x528 <itoa+0x3a>
 4fc:	4a 30       	cpi	r20, 0x0A	; 10
 4fe:	29 f4       	brne	.+10     	; 0x50a <itoa+0x1c>
 500:	97 fb       	bst	r25, 7
 502:	1e f4       	brtc	.+6      	; 0x50a <itoa+0x1c>
 504:	90 95       	com	r25
 506:	81 95       	neg	r24
 508:	9f 4f       	sbci	r25, 0xFF	; 255
 50a:	64 2f       	mov	r22, r20
 50c:	77 27       	eor	r23, r23
 50e:	0e 94 a8 02 	call	0x550	; 0x550 <__udivmodhi4>
 512:	80 5d       	subi	r24, 0xD0	; 208
 514:	8a 33       	cpi	r24, 0x3A	; 58
 516:	0c f0       	brlt	.+2      	; 0x51a <itoa+0x2c>
 518:	89 5d       	subi	r24, 0xD9	; 217
 51a:	81 93       	st	Z+, r24
 51c:	cb 01       	movw	r24, r22
 51e:	00 97       	sbiw	r24, 0x00	; 0
 520:	a1 f7       	brne	.-24     	; 0x50a <itoa+0x1c>
 522:	16 f4       	brtc	.+4      	; 0x528 <itoa+0x3a>
 524:	5d e2       	ldi	r21, 0x2D	; 45
 526:	51 93       	st	Z+, r21
 528:	10 82       	st	Z, r1
 52a:	c9 01       	movw	r24, r18
 52c:	0c 94 98 02 	jmp	0x530	; 0x530 <strrev>

00000530 <strrev>:
 530:	dc 01       	movw	r26, r24
 532:	fc 01       	movw	r30, r24
 534:	67 2f       	mov	r22, r23
 536:	71 91       	ld	r23, Z+
 538:	77 23       	and	r23, r23
 53a:	e1 f7       	brne	.-8      	; 0x534 <strrev+0x4>
 53c:	32 97       	sbiw	r30, 0x02	; 2
 53e:	04 c0       	rjmp	.+8      	; 0x548 <strrev+0x18>
 540:	7c 91       	ld	r23, X
 542:	6d 93       	st	X+, r22
 544:	70 83       	st	Z, r23
 546:	62 91       	ld	r22, -Z
 548:	ae 17       	cp	r26, r30
 54a:	bf 07       	cpc	r27, r31
 54c:	c8 f3       	brcs	.-14     	; 0x540 <strrev+0x10>
 54e:	08 95       	ret

00000550 <__udivmodhi4>:
 550:	aa 1b       	sub	r26, r26
 552:	bb 1b       	sub	r27, r27
 554:	51 e1       	ldi	r21, 0x11	; 17
 556:	07 c0       	rjmp	.+14     	; 0x566 <__udivmodhi4_ep>

00000558 <__udivmodhi4_loop>:
 558:	aa 1f       	adc	r26, r26
 55a:	bb 1f       	adc	r27, r27
 55c:	a6 17       	cp	r26, r22
 55e:	b7 07       	cpc	r27, r23
 560:	10 f0       	brcs	.+4      	; 0x566 <__udivmodhi4_ep>
 562:	a6 1b       	sub	r26, r22
 564:	b7 0b       	sbc	r27, r23

00000566 <__udivmodhi4_ep>:
 566:	88 1f       	adc	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	5a 95       	dec	r21
 56c:	a9 f7       	brne	.-22     	; 0x558 <__udivmodhi4_loop>
 56e:	80 95       	com	r24
 570:	90 95       	com	r25
 572:	bc 01       	movw	r22, r24
 574:	cd 01       	movw	r24, r26
 576:	08 95       	ret

00000578 <_exit>:
 578:	f8 94       	cli

0000057a <__stop_program>:
 57a:	ff cf       	rjmp	.-2      	; 0x57a <__stop_program>
