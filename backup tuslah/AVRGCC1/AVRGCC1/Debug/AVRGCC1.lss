
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000560  000005f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000560  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800116  00800116  0000060a  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  0000060c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016e  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  000010ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000011c  00000000  00000000  000010ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000af6  00000000  00000000  0000120a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000020f  00000000  00000000  00001d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000006f0  00000000  00000000  00001f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000d0  00000000  00000000  00002600  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000228  00000000  00000000  000026d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000023b  00000000  00000000  000028f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000044  00000000  00000000  00002b33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  00002b77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__vector_21>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e6       	ldi	r30, 0x60	; 96
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a6 e1       	ldi	r26, 0x16	; 22
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 31       	cpi	r26, 0x1E	; 30
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 a7 01 	call	0x34e	; 0x34e <main>
  c6:	0c 94 ae 02 	jmp	0x55c	; 0x55c <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <USART0_Init>:
	ADCSRA |= (1<<ADSC);
}

void USART0_Init(void){
   // Set baud rate
   UBRR0L = BAUD_PRESCALE;// Load lower 8-bits into the low byte of the UBRR register
  ce:	85 e0       	ldi	r24, 0x05	; 5
  d0:	89 b9       	out	0x09, r24	; 9
   UBRR0H = (BAUD_PRESCALE >> 8); 
  d2:	10 92 90 00 	sts	0x0090, r1
	 /* Load upper 8-bits into the high byte of the UBRR register
    Default frame format is 8 data bits, no parity, 1 stop bit
  to change use UCSRC, see AVR datasheet*/ 

  // Enable receiver and transmitter and receive complete interrupt 
  UCSR0B = (1<<TXEN);
  d6:	88 e0       	ldi	r24, 0x08	; 8
  d8:	8a b9       	out	0x0a, r24	; 10
}
  da:	08 95       	ret

000000dc <USART0_SendByte>:


void USART0_SendByte(uint8_t u8Data){

  // Wait until last byte has been transmitted
  while((UCSR0A &(1<<UDRE0)) == 0);
  dc:	5d 9b       	sbis	0x0b, 5	; 11
  de:	fe cf       	rjmp	.-4      	; 0xdc <USART0_SendByte>

  // Transmit data
  UDR0 = u8Data;
  e0:	8c b9       	out	0x0c, r24	; 12
}
  e2:	08 95       	ret

000000e4 <lcd_write_4>:
  Exit:     no parameters
  Notes:    use either time delays or the busy flag
*/
void lcd_write_4(uint8_t theByte)
{
    lcd_D7_port &= ~(1<<lcd_D7_bit);                        // assume that data is '0'
  e4:	af 98       	cbi	0x15, 7	; 21
    if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);     // make data = '1' if necessary
  e6:	88 23       	and	r24, r24
  e8:	0c f4       	brge	.+2      	; 0xec <lcd_write_4+0x8>
  ea:	af 9a       	sbi	0x15, 7	; 21

    lcd_D6_port &= ~(1<<lcd_D6_bit);                        // repeat for each data bit
  ec:	ae 98       	cbi	0x15, 6	; 21
    if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
  ee:	86 fd       	sbrc	r24, 6
  f0:	ae 9a       	sbi	0x15, 6	; 21

    lcd_D5_port &= ~(1<<lcd_D5_bit);
  f2:	ad 98       	cbi	0x15, 5	; 21
    if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
  f4:	85 fd       	sbrc	r24, 5
  f6:	ad 9a       	sbi	0x15, 5	; 21

    lcd_D4_port &= ~(1<<lcd_D4_bit);
  f8:	ac 98       	cbi	0x15, 4	; 21
    if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
  fa:	84 fd       	sbrc	r24, 4
  fc:	ac 9a       	sbi	0x15, 4	; 21

// write the data
                                                    // 'Address set-up time' (40 nS)
    lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
  fe:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	00 00       	nop
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
 102:	97 98       	cbi	0x12, 7	; 18
 104:	00 00       	nop
    _delay_us(1);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
 106:	08 95       	ret

00000108 <lcd_write_instruction_4d>:
  Entry:    (theInstruction) is the information to be sent to the instruction register
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/
void lcd_write_instruction_4d(uint8_t theInstruction)
{
 108:	1f 93       	push	r17
 10a:	18 2f       	mov	r17, r24
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
 10c:	95 98       	cbi	0x12, 5	; 18
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
 10e:	97 98       	cbi	0x12, 7	; 18
    lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
 110:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_write_4>
    lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
 114:	81 2f       	mov	r24, r17
 116:	82 95       	swap	r24
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_write_4>
}
 11e:	1f 91       	pop	r17
 120:	08 95       	ret

00000122 <lcd_write_character_4d>:
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/

void lcd_write_character_4d(uint8_t theData)
{
 122:	1f 93       	push	r17
 124:	18 2f       	mov	r17, r24
    lcd_RS_port |= (1<<lcd_RS_bit);                 // select the Data Register (RS high)
 126:	95 9a       	sbi	0x12, 5	; 18
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
 128:	97 98       	cbi	0x12, 7	; 18
    lcd_write_4(theData);                           // write the upper 4-bits of the data
 12a:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_write_4>
    lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
 12e:	81 2f       	mov	r24, r17
 130:	82 95       	swap	r24
 132:	80 7f       	andi	r24, 0xF0	; 240
 134:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_write_4>
}
 138:	1f 91       	pop	r17
 13a:	08 95       	ret

0000013c <lcd_write_string_4d>:
  Entry:    (theString) is the string to be displayed
  Exit:     no parameters
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
 13c:	0f 93       	push	r16
 13e:	1f 93       	push	r17
 140:	df 93       	push	r29
 142:	cf 93       	push	r28
 144:	00 d0       	rcall	.+0      	; 0x146 <lcd_write_string_4d+0xa>
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
 14a:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // character counter*/
 14c:	1a 82       	std	Y+2, r1	; 0x02
 14e:	19 82       	std	Y+1, r1	; 0x01
    while (theString[i] != 0)
 150:	e9 81       	ldd	r30, Y+1	; 0x01
 152:	fa 81       	ldd	r31, Y+2	; 0x02
 154:	e8 0f       	add	r30, r24
 156:	f9 1f       	adc	r31, r25
 158:	80 81       	ld	r24, Z
 15a:	88 23       	and	r24, r24
 15c:	b9 f0       	breq	.+46     	; 0x18c <lcd_write_string_4d+0x50>
    {
        lcd_write_character_4d(theString[i]);
 15e:	e9 81       	ldd	r30, Y+1	; 0x01
 160:	fa 81       	ldd	r31, Y+2	; 0x02
 162:	e0 0f       	add	r30, r16
 164:	f1 1f       	adc	r31, r17
 166:	80 81       	ld	r24, Z
 168:	0e 94 91 00 	call	0x122	; 0x122 <lcd_write_character_4d>
        i++;
 16c:	89 81       	ldd	r24, Y+1	; 0x01
 16e:	9a 81       	ldd	r25, Y+2	; 0x02
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	9a 83       	std	Y+2, r25	; 0x02
 174:	89 83       	std	Y+1, r24	; 0x01
 176:	8a e1       	ldi	r24, 0x1A	; 26
 178:	8a 95       	dec	r24
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_write_string_4d+0x3c>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <lcd_write_string_4d+0x42>
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(uint8_t theString[])
{
    volatile int i = 0;                             // character counter*/
    while (theString[i] != 0)
 17e:	e9 81       	ldd	r30, Y+1	; 0x01
 180:	fa 81       	ldd	r31, Y+2	; 0x02
 182:	e0 0f       	add	r30, r16
 184:	f1 1f       	adc	r31, r17
 186:	80 81       	ld	r24, Z
 188:	88 23       	and	r24, r24
 18a:	49 f7       	brne	.-46     	; 0x15e <lcd_write_string_4d+0x22>
    {
        lcd_write_character_4d(theString[i]);
        i++;
        _delay_us(80);                              // 40 uS delay (min)
    }
}
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	cf 91       	pop	r28
 192:	df 91       	pop	r29
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	08 95       	ret

0000019a <lcd_puthex>:
void CopyStringtoLCD(const uint8_t *FlashLoc);
void LCDsendChar(uint8_t ch);


void lcd_puthex(const char data)
{
 19a:	1f 93       	push	r17
 19c:	18 2f       	mov	r17, r24
 19e:	8a e1       	ldi	r24, 0x1A	; 26
 1a0:	8a 95       	dec	r24
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_puthex+0x6>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <lcd_puthex+0xc>
	//lcd_write_character_4d('0');
	//_delay_us(80);
	//print 'x'
	//lcd_write_character_4d('x');
	//_delay_us(80);
	(((data>>4)&0x0F)<=9) ? (temp='0'+((data>>4)&0x0F)) : (temp='A'+ ((data>>4)&0x0F)-0x0A);
 1a6:	81 2f       	mov	r24, r17
 1a8:	82 95       	swap	r24
 1aa:	8f 70       	andi	r24, 0x0F	; 15
 1ac:	28 2f       	mov	r18, r24
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	2a 30       	cpi	r18, 0x0A	; 10
 1b2:	31 05       	cpc	r19, r1
 1b4:	14 f4       	brge	.+4      	; 0x1ba <lcd_puthex+0x20>
 1b6:	80 5d       	subi	r24, 0xD0	; 208
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <lcd_puthex+0x22>
 1ba:	89 5c       	subi	r24, 0xC9	; 201
 1bc:	9a e1       	ldi	r25, 0x1A	; 26
 1be:	9a 95       	dec	r25
 1c0:	f1 f7       	brne	.-4      	; 0x1be <lcd_puthex+0x24>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <lcd_puthex+0x2a>
	_delay_us(80);
	//print high nibble as hex
	lcd_write_character_4d(temp);
 1c4:	0e 94 91 00 	call	0x122	; 0x122 <lcd_write_character_4d>
 1c8:	8a e1       	ldi	r24, 0x1A	; 26
 1ca:	8a 95       	dec	r24
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_puthex+0x30>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_puthex+0x36>
	_delay_us(80);
	((data&0x0F)<=9) ? (temp='0'+ (data&0x0F)) : (temp='A'+ (data&0x0F)-0x0A);
 1d0:	21 2f       	mov	r18, r17
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	2f 70       	andi	r18, 0x0F	; 15
 1d6:	30 70       	andi	r19, 0x00	; 0
 1d8:	2a 30       	cpi	r18, 0x0A	; 10
 1da:	31 05       	cpc	r19, r1
 1dc:	24 f4       	brge	.+8      	; 0x1e6 <lcd_puthex+0x4c>
 1de:	1f 70       	andi	r17, 0x0F	; 15
 1e0:	81 2f       	mov	r24, r17
 1e2:	80 5d       	subi	r24, 0xD0	; 208
 1e4:	03 c0       	rjmp	.+6      	; 0x1ec <lcd_puthex+0x52>
 1e6:	1f 70       	andi	r17, 0x0F	; 15
 1e8:	81 2f       	mov	r24, r17
 1ea:	89 5c       	subi	r24, 0xC9	; 201
	lcd_write_character_4d(temp);
 1ec:	0e 94 91 00 	call	0x122	; 0x122 <lcd_write_character_4d>
 1f0:	9a e1       	ldi	r25, 0x1A	; 26
 1f2:	9a 95       	dec	r25
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_puthex+0x58>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <lcd_puthex+0x5e>
	_delay_us(80);
	//print low nibble as hex
}
 1f8:	1f 91       	pop	r17
 1fa:	08 95       	ret

000001fc <lcd_init_4d>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fc:	87 ea       	ldi	r24, 0xA7	; 167
 1fe:	91 e6       	ldi	r25, 0x61	; 97
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <lcd_init_4d+0x4>
 204:	00 c0       	rjmp	.+0      	; 0x206 <lcd_init_4d+0xa>
 206:	00 00       	nop
void lcd_init_4d(void)
{
// Power-up delay
    _delay_ms(100);                                 // initial 40 mSec delay

    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
 208:	95 98       	cbi	0x12, 5	; 18
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
 20a:	97 98       	cbi	0x12, 7	; 18

// Reset the LCD controller
    lcd_write_4(lcd_FunctionReset);                 // first part of reset sequence
 20c:	80 e3       	ldi	r24, 0x30	; 48
 20e:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_write_4>
 212:	83 ec       	ldi	r24, 0xC3	; 195
 214:	99 e0       	ldi	r25, 0x09	; 9
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <lcd_init_4d+0x1a>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <lcd_init_4d+0x20>
 21c:	00 00       	nop
    _delay_ms(10);                                  // 4.1 mS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // second part of reset sequence
 21e:	80 e3       	ldi	r24, 0x30	; 48
 220:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_write_4>
 224:	89 ef       	ldi	r24, 0xF9	; 249
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <lcd_init_4d+0x2c>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <lcd_init_4d+0x32>
 22e:	00 00       	nop
    _delay_ms(1);                                 // 100uS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // third part of reset sequence
 230:	80 e3       	ldi	r24, 0x30	; 48
 232:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_write_4>
 236:	89 ef       	ldi	r24, 0xF9	; 249
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_init_4d+0x3e>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <lcd_init_4d+0x44>
 240:	00 00       	nop
// Preliminary Function Set instruction - used only to set the 4-bit mode.
// The number of lines or the font cannot be set at this time since the controller is still in the
//  8-bit mode, but the data transfer mode can be changed since this parameter is determined by one 
//  of the upper four bits of the instruction.
 
    lcd_write_4(lcd_FunctionSet4bit);               // set 4-bit mode
 242:	88 e2       	ldi	r24, 0x28	; 40
 244:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_write_4>
 248:	89 ef       	ldi	r24, 0xF9	; 249
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <lcd_init_4d+0x50>
 250:	00 c0       	rjmp	.+0      	; 0x252 <lcd_init_4d+0x56>
 252:	00 00       	nop
    _delay_ms(1);                                  // 40uS delay (min)

// Function Set instruction
    lcd_write_instruction_4d(lcd_FunctionSet4bit);   // set mode, lines, and font
 254:	88 e2       	ldi	r24, 0x28	; 40
 256:	0e 94 84 00 	call	0x108	; 0x108 <lcd_write_instruction_4d>
 25a:	89 ef       	ldi	r24, 0xF9	; 249
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <lcd_init_4d+0x62>
 262:	00 c0       	rjmp	.+0      	; 0x264 <lcd_init_4d+0x68>
 264:	00 00       	nop
// The next three instructions are specified in the data sheet as part of the initialization routine, 
//  so it is a good idea (but probably not necessary) to do them just as specified and then redo them 
//  later if the application requires a different configuration.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOff);        // turn display OFF
 266:	88 e0       	ldi	r24, 0x08	; 8
 268:	0e 94 84 00 	call	0x108	; 0x108 <lcd_write_instruction_4d>
 26c:	89 ef       	ldi	r24, 0xF9	; 249
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <lcd_init_4d+0x74>
 274:	00 c0       	rjmp	.+0      	; 0x276 <lcd_init_4d+0x7a>
 276:	00 00       	nop
    _delay_ms(1);                                  // 40uS delay (min)

// Clear Display instruction
    lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 84 00 	call	0x108	; 0x108 <lcd_write_instruction_4d>
 27e:	87 ee       	ldi	r24, 0xE7	; 231
 280:	93 e0       	ldi	r25, 0x03	; 3
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <lcd_init_4d+0x86>
 286:	00 c0       	rjmp	.+0      	; 0x288 <lcd_init_4d+0x8c>
 288:	00 00       	nop
    _delay_ms(4);                                   // 1.64 mS delay (min)

// ; Entry Mode Set instruction
    lcd_write_instruction_4d(lcd_EntryMode);         // set desired shift characteristics
 28a:	86 e0       	ldi	r24, 0x06	; 6
 28c:	0e 94 84 00 	call	0x108	; 0x108 <lcd_write_instruction_4d>
 290:	89 ef       	ldi	r24, 0xF9	; 249
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <lcd_init_4d+0x98>
 298:	00 c0       	rjmp	.+0      	; 0x29a <lcd_init_4d+0x9e>
 29a:	00 00       	nop

// This is the end of the LCD controller initialization as specified in the data sheet, but the display
//  has been left in the OFF condition.  This is a good time to turn the display back ON.
 
// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
 29c:	8c e0       	ldi	r24, 0x0C	; 12
 29e:	0e 94 84 00 	call	0x108	; 0x108 <lcd_write_instruction_4d>
 2a2:	89 ef       	ldi	r24, 0xF9	; 249
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <lcd_init_4d+0xaa>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <lcd_init_4d+0xb0>
 2ac:	00 00       	nop
    _delay_ms(1);                                  // 40uS delay (min)
}
 2ae:	08 95       	ret

000002b0 <LCDsendChar>:

void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

	//4 bit part
	PORTC=(ch&0b11110000);
 2b0:	98 2f       	mov	r25, r24
 2b2:	90 7f       	andi	r25, 0xF0	; 240
 2b4:	95 bb       	out	0x15, r25	; 21
	PORTD|=1<<lcd_RS_bit ;
 2b6:	95 9a       	sbi	0x12, 5	; 18
	PORTG|=1<<lcd_E_bit;		
 2b8:	e5 e6       	ldi	r30, 0x65	; 101
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	90 81       	ld	r25, Z
 2be:	90 68       	ori	r25, 0x80	; 128
 2c0:	90 83       	st	Z, r25
 2c2:	a9 ef       	ldi	r26, 0xF9	; 249
 2c4:	b0 e0       	ldi	r27, 0x00	; 0
 2c6:	11 97       	sbiw	r26, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <LCDsendChar+0x16>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <LCDsendChar+0x1c>
 2cc:	00 00       	nop
	_delay_ms(1);
	PORTG&=~(1<<lcd_E_bit);	
 2ce:	90 81       	ld	r25, Z
 2d0:	9f 77       	andi	r25, 0x7F	; 127
 2d2:	90 83       	st	Z, r25
	PORTD&=~(1<<lcd_RS_bit);
 2d4:	95 98       	cbi	0x12, 5	; 18
 2d6:	a9 ef       	ldi	r26, 0xF9	; 249
 2d8:	b0 e0       	ldi	r27, 0x00	; 0
 2da:	11 97       	sbiw	r26, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <LCDsendChar+0x2a>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <LCDsendChar+0x30>
 2e0:	00 00       	nop
	_delay_ms(1);
	PORTC=((ch&0b00001111)<<4);
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	82 95       	swap	r24
 2e6:	92 95       	swap	r25
 2e8:	90 7f       	andi	r25, 0xF0	; 240
 2ea:	98 27       	eor	r25, r24
 2ec:	80 7f       	andi	r24, 0xF0	; 240
 2ee:	98 27       	eor	r25, r24
 2f0:	85 bb       	out	0x15, r24	; 21
	PORTD|=1<<lcd_RS_bit;
 2f2:	95 9a       	sbi	0x12, 5	; 18
	PORTG|=1<<lcd_E_bit;		
 2f4:	80 81       	ld	r24, Z
 2f6:	80 68       	ori	r24, 0x80	; 128
 2f8:	80 83       	st	Z, r24
 2fa:	89 ef       	ldi	r24, 0xF9	; 249
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <LCDsendChar+0x4e>
 302:	00 c0       	rjmp	.+0      	; 0x304 <LCDsendChar+0x54>
 304:	00 00       	nop
	_delay_ms(1);
	PORTG&=~(1<<lcd_E_bit);	
 306:	80 81       	ld	r24, Z
 308:	8f 77       	andi	r24, 0x7F	; 127
 30a:	80 83       	st	Z, r24
	PORTD&=~(1<<lcd_RS_bit);
 30c:	95 98       	cbi	0x12, 5	; 18
 30e:	a9 ef       	ldi	r26, 0xF9	; 249
 310:	b0 e0       	ldi	r27, 0x00	; 0
 312:	11 97       	sbiw	r26, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <LCDsendChar+0x62>
 316:	00 c0       	rjmp	.+0      	; 0x318 <LCDsendChar+0x68>
 318:	00 00       	nop
	_delay_ms(1);
}
 31a:	08 95       	ret

0000031c <CopyStringtoLCD>:
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
    _delay_us(1);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
void CopyStringtoLCD(const uint8_t *FlashLoc)
{
 31c:	1f 93       	push	r17
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	ec 01       	movw	r28, r24
	uint8_t i;
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 324:	fe 01       	movw	r30, r28
 326:	24 91       	lpm	r18, Z+
 328:	22 23       	and	r18, r18
 32a:	69 f0       	breq	.+26     	; 0x346 <CopyStringtoLCD+0x2a>
 32c:	10 e0       	ldi	r17, 0x00	; 0
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
 32e:	fc 01       	movw	r30, r24
 330:	84 91       	lpm	r24, Z+
 332:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCDsendChar>
    _delay_us(1);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
void CopyStringtoLCD(const uint8_t *FlashLoc)
{
	uint8_t i;
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 336:	1f 5f       	subi	r17, 0xFF	; 255
 338:	ce 01       	movw	r24, r28
 33a:	81 0f       	add	r24, r17
 33c:	91 1d       	adc	r25, r1
 33e:	fc 01       	movw	r30, r24
 340:	24 91       	lpm	r18, Z+
 342:	22 23       	and	r18, r18
 344:	a1 f7       	brne	.-24     	; 0x32e <CopyStringtoLCD+0x12>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	1f 91       	pop	r17
 34c:	08 95       	ret

0000034e <main>:

ISR(ADC_vect);

int main(void)
{
	DDRA |= (1<<RELAY_PIN); //relay pin
 34e:	d1 9a       	sbi	0x1a, 1	; 26
	PORTA &= ~(1<<RELAY_PIN);
 350:	d9 98       	cbi	0x1b, 1	; 27
    DDRC = 0xFF;    // lcd pins
 352:	8f ef       	ldi	r24, 0xFF	; 255
 354:	84 bb       	out	0x14, r24	; 20
 356:	8f e3       	ldi	r24, 0x3F	; 63
 358:	9d e0       	ldi	r25, 0x0D	; 13
 35a:	a3 e0       	ldi	r26, 0x03	; 3
 35c:	81 50       	subi	r24, 0x01	; 1
 35e:	90 40       	sbci	r25, 0x00	; 0
 360:	a0 40       	sbci	r26, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <main+0xe>
 364:	00 c0       	rjmp	.+0      	; 0x366 <main+0x18>
 366:	00 00       	nop
    _delay_ms(1000);
   
	DDRF &= ~(_BV(3));
 368:	e1 e6       	ldi	r30, 0x61	; 97
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	80 81       	ld	r24, Z
 36e:	87 7f       	andi	r24, 0xF7	; 247
 370:	80 83       	st	Z, r24
 372:	af e1       	ldi	r26, 0x1F	; 31
 374:	be e4       	ldi	r27, 0x4E	; 78
 376:	11 97       	sbiw	r26, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <main+0x28>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <main+0x2e>
 37c:	00 00       	nop
	_delay_ms(80);
	PORTC &= ~(_BV(3));
 37e:	ab 98       	cbi	0x15, 3	; 21
    PORTC &= ~(_BV(2));
 380:	aa 98       	cbi	0x15, 2	; 21
    PORTC &= ~(_BV(1));
 382:	a9 98       	cbi	0x15, 1	; 21
    PORTC &= ~(_BV(0));
 384:	a8 98       	cbi	0x15, 0	; 21
 
// configure the microprocessor pins for the control lines
    lcd_E_ddr |= (1<<lcd_E_bit);                    // E line - output
 386:	8f 9a       	sbi	0x11, 7	; 17
    lcd_RS_ddr |= (1<<lcd_RS_bit);                  // RS line - output
 388:	8d 9a       	sbi	0x11, 5	; 17
 
    lcd_RS_port &= ~(1<<lcd_RS_bit);
 38a:	95 98       	cbi	0x12, 5	; 18
	PORTF &= ~(_BV(1));
 38c:	e2 e6       	ldi	r30, 0x62	; 98
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 81       	ld	r24, Z
 392:	8d 7f       	andi	r24, 0xFD	; 253
 394:	80 83       	st	Z, r24
	
	ADMUX |= (1<<MUX1)|(1<<MUX0);
 396:	87 b1       	in	r24, 0x07	; 7
 398:	83 60       	ori	r24, 0x03	; 3
 39a:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0X8F;
 39c:	8f e8       	ldi	r24, 0x8F	; 143
 39e:	86 b9       	out	0x06, r24	; 6
	USART0_Init();
 3a0:	0e 94 67 00 	call	0xce	; 0xce <USART0_Init>
 3a4:	8f e3       	ldi	r24, 0x3F	; 63
 3a6:	9d e0       	ldi	r25, 0x0D	; 13
 3a8:	a3 e0       	ldi	r26, 0x03	; 3
 3aa:	81 50       	subi	r24, 0x01	; 1
 3ac:	90 40       	sbci	r25, 0x00	; 0
 3ae:	a0 40       	sbci	r26, 0x00	; 0
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <main+0x5c>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <main+0x66>
 3b4:	00 00       	nop
	_delay_ms(1000);
	lcd_init_4d();
 3b6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_init_4d>
	lcd_write_instruction_4d(lcd_Clear);
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	0e 94 84 00 	call	0x108	; 0x108 <lcd_write_instruction_4d>
 3c0:	a3 ec       	ldi	r26, 0xC3	; 195
 3c2:	b9 e0       	ldi	r27, 0x09	; 9
 3c4:	11 97       	sbiw	r26, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <main+0x76>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <main+0x7c>
 3ca:	00 00       	nop
    _delay_ms(10);
	lcd_write_string_4d("Starting...");
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_write_string_4d>
	sei();
 3d4:	78 94       	sei
	MCUSR |= (1<<SE)|(1<<SM0); //adc noise reduction mode
 3d6:	84 b7       	in	r24, 0x34	; 52
 3d8:	88 62       	ori	r24, 0x28	; 40
 3da:	84 bf       	out	0x34, r24	; 52
	ADCSRA |= (1<<ADSC);
 3dc:	36 9a       	sbi	0x06, 6	; 6
 3de:	ff cf       	rjmp	.-2      	; 0x3de <main+0x90>

000003e0 <__vector_21>:
		lcd_write_string_4d(SHOWA);
		_delay_ms(2000);*/
	}
}
ISR(ADC_vect)
{
 3e0:	1f 92       	push	r1
 3e2:	0f 92       	push	r0
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	0f 92       	push	r0
 3e8:	0b b6       	in	r0, 0x3b	; 59
 3ea:	0f 92       	push	r0
 3ec:	11 24       	eor	r1, r1
 3ee:	2f 93       	push	r18
 3f0:	3f 93       	push	r19
 3f2:	4f 93       	push	r20
 3f4:	5f 93       	push	r21
 3f6:	6f 93       	push	r22
 3f8:	7f 93       	push	r23
 3fa:	8f 93       	push	r24
 3fc:	9f 93       	push	r25
 3fe:	af 93       	push	r26
 400:	bf 93       	push	r27
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	ef 93       	push	r30
 408:	ff 93       	push	r31
	lcd_write_instruction_4d(lcd_Clear);
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	0e 94 84 00 	call	0x108	; 0x108 <lcd_write_instruction_4d>
 410:	83 ec       	ldi	r24, 0xC3	; 195
 412:	99 e0       	ldi	r25, 0x09	; 9
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <__vector_21+0x34>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__vector_21+0x3a>
 41a:	00 00       	nop
	{
		int16_t y = rand(4);
		COUNTA -= y;
	}		
	else 		*/
		COUNTA = (ADC*500)/1024;
 41c:	44 b1       	in	r20, 0x04	; 4
 41e:	55 b1       	in	r21, 0x05	; 5
 420:	24 ef       	ldi	r18, 0xF4	; 244
 422:	31 e0       	ldi	r19, 0x01	; 1
 424:	42 9f       	mul	r20, r18
 426:	c0 01       	movw	r24, r0
 428:	43 9f       	mul	r20, r19
 42a:	90 0d       	add	r25, r0
 42c:	52 9f       	mul	r21, r18
 42e:	90 0d       	add	r25, r0
 430:	11 24       	eor	r1, r1
 432:	89 2f       	mov	r24, r25
 434:	99 27       	eor	r25, r25
 436:	86 95       	lsr	r24
 438:	86 95       	lsr	r24
 43a:	90 93 17 01 	sts	0x0117, r25
 43e:	80 93 16 01 	sts	0x0116, r24
	
	itoa(COUNTA,SHOWA,10);
 442:	80 91 16 01 	lds	r24, 0x0116
 446:	90 91 17 01 	lds	r25, 0x0117
 44a:	ca e1       	ldi	r28, 0x1A	; 26
 44c:	d1 e0       	ldi	r29, 0x01	; 1
 44e:	be 01       	movw	r22, r28
 450:	4a e0       	ldi	r20, 0x0A	; 10
 452:	50 e0       	ldi	r21, 0x00	; 0
 454:	0e 94 69 02 	call	0x4d2	; 0x4d2 <itoa>
	lcd_write_string_4d("ROOM1: ");
 458:	8c e0       	ldi	r24, 0x0C	; 12
 45a:	91 e0       	ldi	r25, 0x01	; 1
 45c:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_write_string_4d>
	lcd_write_string_4d(SHOWA);
 460:	ce 01       	movw	r24, r28
 462:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_write_string_4d>
	lcd_write_string_4d("C");
 466:	84 e1       	ldi	r24, 0x14	; 20
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_write_string_4d>
	USART0_SendByte(SHOWA);  // send value 
 46e:	ce 01       	movw	r24, r28
 470:	0e 94 6e 00 	call	0xdc	; 0xdc <USART0_SendByte>
	if(COUNTA>25)
 474:	80 91 16 01 	lds	r24, 0x0116
 478:	90 91 17 01 	lds	r25, 0x0117
 47c:	8a 31       	cpi	r24, 0x1A	; 26
 47e:	91 05       	cpc	r25, r1
 480:	0c f0       	brlt	.+2      	; 0x484 <__vector_21+0xa4>
		PORTA &= ~(1<<RELAY_PIN);
 482:	d9 98       	cbi	0x1b, 1	; 27
	if(COUNTA<22)
 484:	80 91 16 01 	lds	r24, 0x0116
 488:	90 91 17 01 	lds	r25, 0x0117
 48c:	86 31       	cpi	r24, 0x16	; 22
 48e:	91 05       	cpc	r25, r1
 490:	0c f4       	brge	.+2      	; 0x494 <__vector_21+0xb4>
		PORTA |=(1<<RELAY_PIN);
 492:	d9 9a       	sbi	0x1b, 1	; 27
 494:	8f e7       	ldi	r24, 0x7F	; 127
 496:	9a e1       	ldi	r25, 0x1A	; 26
 498:	a6 e0       	ldi	r26, 0x06	; 6
 49a:	81 50       	subi	r24, 0x01	; 1
 49c:	90 40       	sbci	r25, 0x00	; 0
 49e:	a0 40       	sbci	r26, 0x00	; 0
 4a0:	e1 f7       	brne	.-8      	; 0x49a <__vector_21+0xba>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <__vector_21+0xc4>
 4a4:	00 00       	nop
	_delay_ms(2000);
	ADCSRA |= (1<<ADSC);
 4a6:	36 9a       	sbi	0x06, 6	; 6
}
 4a8:	ff 91       	pop	r31
 4aa:	ef 91       	pop	r30
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	bf 91       	pop	r27
 4b2:	af 91       	pop	r26
 4b4:	9f 91       	pop	r25
 4b6:	8f 91       	pop	r24
 4b8:	7f 91       	pop	r23
 4ba:	6f 91       	pop	r22
 4bc:	5f 91       	pop	r21
 4be:	4f 91       	pop	r20
 4c0:	3f 91       	pop	r19
 4c2:	2f 91       	pop	r18
 4c4:	0f 90       	pop	r0
 4c6:	0b be       	out	0x3b, r0	; 59
 4c8:	0f 90       	pop	r0
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	0f 90       	pop	r0
 4ce:	1f 90       	pop	r1
 4d0:	18 95       	reti

000004d2 <itoa>:
 4d2:	fb 01       	movw	r30, r22
 4d4:	9f 01       	movw	r18, r30
 4d6:	e8 94       	clt
 4d8:	42 30       	cpi	r20, 0x02	; 2
 4da:	c4 f0       	brlt	.+48     	; 0x50c <itoa+0x3a>
 4dc:	45 32       	cpi	r20, 0x25	; 37
 4de:	b4 f4       	brge	.+44     	; 0x50c <itoa+0x3a>
 4e0:	4a 30       	cpi	r20, 0x0A	; 10
 4e2:	29 f4       	brne	.+10     	; 0x4ee <itoa+0x1c>
 4e4:	97 fb       	bst	r25, 7
 4e6:	1e f4       	brtc	.+6      	; 0x4ee <itoa+0x1c>
 4e8:	90 95       	com	r25
 4ea:	81 95       	neg	r24
 4ec:	9f 4f       	sbci	r25, 0xFF	; 255
 4ee:	64 2f       	mov	r22, r20
 4f0:	77 27       	eor	r23, r23
 4f2:	0e 94 9a 02 	call	0x534	; 0x534 <__udivmodhi4>
 4f6:	80 5d       	subi	r24, 0xD0	; 208
 4f8:	8a 33       	cpi	r24, 0x3A	; 58
 4fa:	0c f0       	brlt	.+2      	; 0x4fe <itoa+0x2c>
 4fc:	89 5d       	subi	r24, 0xD9	; 217
 4fe:	81 93       	st	Z+, r24
 500:	cb 01       	movw	r24, r22
 502:	00 97       	sbiw	r24, 0x00	; 0
 504:	a1 f7       	brne	.-24     	; 0x4ee <itoa+0x1c>
 506:	16 f4       	brtc	.+4      	; 0x50c <itoa+0x3a>
 508:	5d e2       	ldi	r21, 0x2D	; 45
 50a:	51 93       	st	Z+, r21
 50c:	10 82       	st	Z, r1
 50e:	c9 01       	movw	r24, r18
 510:	0c 94 8a 02 	jmp	0x514	; 0x514 <strrev>

00000514 <strrev>:
 514:	dc 01       	movw	r26, r24
 516:	fc 01       	movw	r30, r24
 518:	67 2f       	mov	r22, r23
 51a:	71 91       	ld	r23, Z+
 51c:	77 23       	and	r23, r23
 51e:	e1 f7       	brne	.-8      	; 0x518 <strrev+0x4>
 520:	32 97       	sbiw	r30, 0x02	; 2
 522:	04 c0       	rjmp	.+8      	; 0x52c <strrev+0x18>
 524:	7c 91       	ld	r23, X
 526:	6d 93       	st	X+, r22
 528:	70 83       	st	Z, r23
 52a:	62 91       	ld	r22, -Z
 52c:	ae 17       	cp	r26, r30
 52e:	bf 07       	cpc	r27, r31
 530:	c8 f3       	brcs	.-14     	; 0x524 <strrev+0x10>
 532:	08 95       	ret

00000534 <__udivmodhi4>:
 534:	aa 1b       	sub	r26, r26
 536:	bb 1b       	sub	r27, r27
 538:	51 e1       	ldi	r21, 0x11	; 17
 53a:	07 c0       	rjmp	.+14     	; 0x54a <__udivmodhi4_ep>

0000053c <__udivmodhi4_loop>:
 53c:	aa 1f       	adc	r26, r26
 53e:	bb 1f       	adc	r27, r27
 540:	a6 17       	cp	r26, r22
 542:	b7 07       	cpc	r27, r23
 544:	10 f0       	brcs	.+4      	; 0x54a <__udivmodhi4_ep>
 546:	a6 1b       	sub	r26, r22
 548:	b7 0b       	sbc	r27, r23

0000054a <__udivmodhi4_ep>:
 54a:	88 1f       	adc	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	5a 95       	dec	r21
 550:	a9 f7       	brne	.-22     	; 0x53c <__udivmodhi4_loop>
 552:	80 95       	com	r24
 554:	90 95       	com	r25
 556:	bc 01       	movw	r22, r24
 558:	cd 01       	movw	r24, r26
 55a:	08 95       	ret

0000055c <_exit>:
 55c:	f8 94       	cli

0000055e <__stop_program>:
 55e:	ff cf       	rjmp	.-2      	; 0x55e <__stop_program>
